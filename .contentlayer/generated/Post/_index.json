[
  {
    "title": "Simplifying Your Content Management with Next.js and Contentlayer",
    "description": "",
    "keywords": "Next.js 13, Contentlayer",
    "date": "February 17, 2023",
    "body": {
      "raw": "\nContent management can be a tedious and time-consuming task, but what if I told you that there's a tool that can simplify the process and make it a breeze? Introducing Contentlayer, a powerful tool that converts your content into data and makes it easy to work with `.md` and `.mdx` files. With Contentlayer, all you need to do is install and configure it, and you can start writing in your preferred file format. The best part? Contentlayer automatically adds types to your data, ensuring that your content is always type-safe. Say goodbye to the hassle of content management and hello to a more streamlined process with Contentlayer and Next.js.\n\n## Setting up a Next.js App\n\nTo create a Next.js app with server components, we'll be utilizing the new appDir feature. Simply add the --experimental-app flag to your command and a new app directory will be created for you. It's worth noting that everything in this directory will be considered a server component by default.\n\nTo get started, run any of the following commands:\n\n```bash\nnpx create-next-app@latest --experimental-app\n# or\nyarn create next-app --experimental-app\n# or\npnpm create next-app --experimental-app\n```\n\nOnce your Next.js app is created, it's a good idea to clean up any unnecessary code to keep your project organized and efficient.\n\n## Install Contentlayer\n\nTo use Contentlayer, you must install the Contentlayer package and the Next.js plugin. To install these packages, run the following commands:\n\n```bash\nnpm install contentlayer next-contentlayer\n#or\nyarn add contentlayer next-contentlayer\n#or\npnpm add contentlayer next-contentlayer\n```\n\n### Configuration for Contentlayer\n\nTo integrate contentlayer into `next dev` and `next build` process we need to wrap `nextConfig` with `withContentlayer` method.\n\n```js\n// next.config.js\n\nconst { withContentlayer } = require('next-contentlayer');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    appDir: true,\n  },\n};\n\nmodule.exports = withContentlayer(nextConfig);\n```\n\nAdditionally, we need to update our tsconfig.json or jsconfig.json file with the following changes:\n\n```ts\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"contentlayer/generated\": [\"./.contentlayer/generated\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.tsx\", \"**/*.ts\", \".contentlayer/generated\"]\n}\n```\n\n### Defining Post schema\n\nLet's start by introducing the importance of defining a Post schema for our blog. This schema will help contentlayer convert our content into data that can be used on our blog. To create this schema, we need to create a new file called contentlayer.config.js in the root of our project and include the following code:\n\n```js\n// contentlayer.config.js\n\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files';\n\nconst Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/*.md`,\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    description: {\n      type: 'string',\n      required: true,\n    },\n    date: {\n      type: 'string',\n      required: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath,\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'posts',\n  documentTypes: [Post],\n});\n```\n\nThis code will define the Post document type, which will represent our blog posts. Each post is expected to be a .md file located in the posts directory. This schema will include the following properties:\n\n- `title`: a required string that will be used as the title of the blog post.\n- `description`: a required string that will be used as the description of the blog post.\n- `date`: a required string that will be used as the date of the blog post.\n- `url`: a computed string that will take the name of the file without extension and will be used as the URL of the blog post.\n\nIt is important to note that the title of the blog post will also be used as the h1 of the blog post, so no other h1 tags should be used in the content. By defining the Post schema, we can easily convert our content into data that can be used on our blog.\n\n### Add posts\n\nTo populate our blog, we need to add some content. Start by creating a new directory called post and add all of your posts there.\n\nFor example, here is a sample post titled what-is-contentlayer.md located in the post directory:\n\n```markdown\n---\ntitle: 'What is Contentlayer?'\ndescription: 'Demo description'\nkeywords: 'content, preprocessor, type-safe'\ndate: '2022-02-22'\n---\n\n**Contentlayer makes working with content easy.** It is a content preprocessor that validates and transforms your content into type-safe JSON you can easily import into your application.\n```\n\n> Important note: Make sure to start the development environment now. Doing so will generate a .contentlayer directory containing all of our content in .json format. This means that our content has been transformed into data, making it easier to manage.\n\n### Blogs page\n\nTo showcase all our blog posts, we will replace the homepage (`app/page.tsx`) with the following code:\n\n```tsx\nimport Link from 'next/link';\nimport { allPosts } from 'contentlayer/generated';\n\nexport const metadata = {\n  title: 'Blog',\n  description:\n    'Discover insights, tips, and techniques on front-end web development. Join me on my journey to create exceptional user-friendly websites.',\n  openGraph: {\n    title: 'Blog',\n    description:\n      'Discover insights, tips, and techniques on front-end web development. Join me on my journey to create exceptional user-friendly websites.',\n    siteName: 'Sameer Jadav',\n    locale: 'en-US',\n    type: 'website',\n  },\n  twitter: {\n    title: 'Blog',\n    description:\n      'Discover insights, tips, and techniques on front-end web development. Join me on my journey to create exceptional user-friendly websites.',\n  },\n};\n\nexport default function Home() {\n  return (\n    <main className=\"p-4\">\n      <h1 className=\"mb-6 text-4xl font-bold\">Blog</h1>\n      {allPosts\n        .sort((a, b) => {\n          if (new Date(a.date) > new Date(b.date)) {\n            return -1;\n          }\n          return 1;\n        })\n        .map((post) => (\n          <Link key={post.url} href={`/blog/${post.url}`}>\n            <p className=\"text-lg\">{post.title}</p>\n          </Link>\n        ))}\n    </main>\n  );\n}\n```\n\nWe import all of our blog posts from contentlayer/generated and display them as links, sorted by date. By destructuring each post object, we can easily access its url and title properties.\n\nNote that we use new Date(b.date) - new Date(a.date) instead of an if statement to sort posts in descending order. We also renamed the component to Blog for clarity. Additionally, we included metadata for SEO purposes using the new metadata format available in next: 13.1.7-canary.5.\n\n### Creating a Single Blog Post Layout\n\nTo render each blog post in its own page, we need to create a slug page. This page will use a specific URL format to identify the post. We can create a file called [slug]/page.tsx and place the following content in it:\n\n```tsx\nimport Balancer from 'react-wrap-balancer';\nimport { allPosts } from 'contentlayer/generated';\n\nexport async function generateStaticParams() {\n  return allPosts.map((post) => ({\n    slug: post.url,\n  }));\n}\n\nexport async function generateMetadata({ params }) {\n  const post = allPosts.find((post) => post.url === params.slug);\n\n  return {\n    title: post.title,\n    description: post.description,\n    openGraph: {\n      title: post.title,\n      description: post.description,\n      siteName: 'Sameer Jadav',\n      locale: 'en-US',\n      type: 'article',\n    },\n    twitter: {\n      title: post.title,\n      description: post.description,\n    },\n  };\n}\n\nexport default async function Blog({ params }) {\n  const post = allPosts.find((post) => post.url === params.slug);\n\n  return (\n    <article>\n      <header>\n        <h1>\n          <Balancer>{post.title}</Balancer>\n        </h1>\n        <time className=\"font-mono text-gray-400\">{post.date}</time>\n      </header>\n      <section\n        className=\"prose prose-invert prose-p:text-neutral-100\"\n        dangerouslySetInnerHTML={{ __html: post.body.html }}\n      />\n    </article>\n  );\n}\n```\n\n- The `generateStaticParams()` function creates a new object from allPosts with only one property, slug, and assigns it to post.url. This object is then used to retrieve the requested blog post.\n- The `generateMetadata()` function generates metadata for the blog post, such as the title, description, and social media tags.\n- The `Blog` component renders the post's title, date, and body.\n\nNow, you have successfully created a blog app. You can design your own UI and start writing your own blog posts. Keep learning and sharing your knowledge with others.\n",
      "html": "<p>Content management can be a tedious and time-consuming task, but what if I told you that there's a tool that can simplify the process and make it a breeze? Introducing Contentlayer, a powerful tool that converts your content into data and makes it easy to work with <code>.md</code> and <code>.mdx</code> files. With Contentlayer, all you need to do is install and configure it, and you can start writing in your preferred file format. The best part? Contentlayer automatically adds types to your data, ensuring that your content is always type-safe. Say goodbye to the hassle of content management and hello to a more streamlined process with Contentlayer and Next.js.</p>\n<h2>Setting up a Next.js App</h2>\n<p>To create a Next.js app with server components, we'll be utilizing the new appDir feature. Simply add the --experimental-app flag to your command and a new app directory will be created for you. It's worth noting that everything in this directory will be considered a server component by default.</p>\n<p>To get started, run any of the following commands:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"bash\" data-theme=\"default\"><code data-language=\"bash\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #ABB2BF\">npx </span><span style=\"color: #98C379\">create-next-app@latest</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">--experimental-app</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># or</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">yarn </span><span style=\"color: #98C379\">create</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">next-app</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">--experimental-app</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\"># or</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">pnpm </span><span style=\"color: #98C379\">create</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">next-app</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">--experimental-app</span></span></code></pre></div>\n<p>Once your Next.js app is created, it's a good idea to clean up any unnecessary code to keep your project organized and efficient.</p>\n<h2>Install Contentlayer</h2>\n<p>To use Contentlayer, you must install the Contentlayer package and the Next.js plugin. To install these packages, run the following commands:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"bash\" data-theme=\"default\"><code data-language=\"bash\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #ABB2BF\">npm </span><span style=\"color: #98C379\">install</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">contentlayer</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">next-contentlayer</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">#or</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">yarn </span><span style=\"color: #98C379\">add</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">contentlayer</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">next-contentlayer</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">#or</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">pnpm </span><span style=\"color: #98C379\">add</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">contentlayer</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">next-contentlayer</span></span></code></pre></div>\n<h3>Configuration for Contentlayer</h3>\n<p>To integrate contentlayer into <code>next dev</code> and <code>next build</code> process we need to wrap <code>nextConfig</code> with <code>withContentlayer</code> method.</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"js\" data-theme=\"default\"><code data-language=\"js\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// next.config.js</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E5C07B\">withContentlayer</span><span style=\"color: #ABB2BF\"> } </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">require</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">'next-contentlayer'</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">/** </span><span style=\"color: #C678DD; font-style: italic\">@type</span><span style=\"color: #7F848E; font-style: italic\"> </span><span style=\"color: #E5C07B; font-style: italic\">{import('next').NextConfig}</span><span style=\"color: #7F848E; font-style: italic\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">nextConfig</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">experimental</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">appDir</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #E5C07B\">module</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E5C07B\">exports</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">withContentlayer</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">nextConfig</span><span style=\"color: #ABB2BF\">);</span></span></code></pre></div>\n<p>Additionally, we need to update our tsconfig.json or jsconfig.json file with the following changes:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"ts\" data-theme=\"default\"><code data-language=\"ts\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #98C379\">\"compilerOptions\"</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #98C379\">\"baseUrl\"</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">\".\"</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #98C379\">\"paths\"</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #98C379\">\"contentlayer/generated\"</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #98C379\">\"./.contentlayer/generated\"</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #98C379\">\"include\"</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #98C379\">\"next-env.d.ts\"</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">\"**/*.tsx\"</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">\"**/*.ts\"</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #98C379\">\".contentlayer/generated\"</span><span style=\"color: #ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div>\n<h3>Defining Post schema</h3>\n<p>Let's start by introducing the importance of defining a Post schema for our blog. This schema will help contentlayer convert our content into data that can be used on our blog. To create this schema, we need to create a new file called contentlayer.config.js in the root of our project and include the following code:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"js\" data-theme=\"default\"><code data-language=\"js\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// contentlayer.config.js</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">defineDocumentType</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75\">makeSource</span><span style=\"color: #ABB2BF\"> } </span><span style=\"color: #C678DD\">from</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">'contentlayer/source-files'</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Post</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">defineDocumentType</span><span style=\"color: #ABB2BF\">(() </span><span style=\"color: #C678DD\">=></span><span style=\"color: #ABB2BF\"> ({</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">name</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'Post'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">filePathPattern</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">`**/*.md`</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">fields</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">type</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'string'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">required</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">type</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'string'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">required</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">date</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">type</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'string'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">required</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">computedFields</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">url</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">type</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'string'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #61AFEF\">resolve</span><span style=\"color: #ABB2BF\">: (</span><span style=\"color: #E06C75; font-style: italic\">doc</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=></span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">doc</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E5C07B\">_raw</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">flattenedPath</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}));</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">export</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">default</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">makeSource</span><span style=\"color: #ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">contentDirPath</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'posts'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">documentTypes</span><span style=\"color: #ABB2BF\">: [</span><span style=\"color: #E06C75\">Post</span><span style=\"color: #ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">});</span></span></code></pre></div>\n<p>This code will define the Post document type, which will represent our blog posts. Each post is expected to be a .md file located in the posts directory. This schema will include the following properties:</p>\n<ul>\n<li><code>title</code>: a required string that will be used as the title of the blog post.</li>\n<li><code>description</code>: a required string that will be used as the description of the blog post.</li>\n<li><code>date</code>: a required string that will be used as the date of the blog post.</li>\n<li><code>url</code>: a computed string that will take the name of the file without extension and will be used as the URL of the blog post.</li>\n</ul>\n<p>It is important to note that the title of the blog post will also be used as the h1 of the blog post, so no other h1 tags should be used in the content. By defining the Post schema, we can easily convert our content into data that can be used on our blog.</p>\n<h3>Add posts</h3>\n<p>To populate our blog, we need to add some content. Start by creating a new directory called post and add all of your posts there.</p>\n<p>For example, here is a sample post titled what-is-contentlayer.md located in the post directory:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"markdown\" data-theme=\"default\"><code data-language=\"markdown\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #ABB2BF\">---</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'What is Contentlayer?'</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'Demo description'</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">keywords</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'content, preprocessor, type-safe'</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">date</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'2022-02-22'</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">---</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #D19A66\">**Contentlayer makes working with content easy.**</span><span style=\"color: #ABB2BF\"> It is a content preprocessor that validates and transforms your content into type-safe JSON you can easily import into your application.</span></span></code></pre></div>\n<blockquote>\n<p>Important note: Make sure to start the development environment now. Doing so will generate a .contentlayer directory containing all of our content in .json format. This means that our content has been transformed into data, making it easier to manage.</p>\n</blockquote>\n<h3>Blogs page</h3>\n<p>To showcase all our blog posts, we will replace the homepage (<code>app/page.tsx</code>) with the following code:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"tsx\" data-theme=\"default\"><code data-language=\"tsx\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">Link</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">from</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">'next/link'</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">allPosts</span><span style=\"color: #ABB2BF\"> } </span><span style=\"color: #C678DD\">from</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">'contentlayer/generated'</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">export</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">metadata</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'Blog'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #98C379\">'Discover insights, tips, and techniques on front-end web development. Join me on my journey to create exceptional user-friendly websites.'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">openGraph</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'Blog'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #98C379\">'Discover insights, tips, and techniques on front-end web development. Join me on my journey to create exceptional user-friendly websites.'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">siteName</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'Sameer Jadav'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">locale</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'en-US'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">type</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'website'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #E06C75\">twitter</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'Blog'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #98C379\">'Discover insights, tips, and techniques on front-end web development. Join me on my journey to create exceptional user-friendly websites.'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">export</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">default</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Home</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#x3C;</span><span style=\"color: #E06C75\">main</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66; font-style: italic\">className</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #98C379\">\"p-4\"</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#x3C;</span><span style=\"color: #E06C75\">h1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66; font-style: italic\">className</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #98C379\">\"mb-6 text-4xl font-bold\"</span><span style=\"color: #ABB2BF\">>Blog&#x3C;/</span><span style=\"color: #E06C75\">h1</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #C678DD\">{</span><span style=\"color: #E06C75\">allPosts</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        .</span><span style=\"color: #61AFEF\">sort</span><span style=\"color: #ABB2BF\">((</span><span style=\"color: #E06C75; font-style: italic\">a</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E06C75; font-style: italic\">b</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=></span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Date</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">a</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">date</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #56B6C2\">></span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Date</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">b</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">date</span><span style=\"color: #ABB2BF\">)) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        })</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        .</span><span style=\"color: #61AFEF\">map</span><span style=\"color: #ABB2BF\">((</span><span style=\"color: #E06C75; font-style: italic\">post</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=></span><span style=\"color: #ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          &#x3C;</span><span style=\"color: #E5C07B\">Link</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66; font-style: italic\">key</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #C678DD\">{</span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">url</span><span style=\"color: #C678DD\">}</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66; font-style: italic\">href</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #C678DD\">{</span><span style=\"color: #98C379\">`/blog/</span><span style=\"color: #C678DD\">${</span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">url</span><span style=\"color: #C678DD\">}</span><span style=\"color: #98C379\">`</span><span style=\"color: #C678DD\">}</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            &#x3C;</span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66; font-style: italic\">className</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #98C379\">\"text-lg\"</span><span style=\"color: #ABB2BF\">></span><span style=\"color: #C678DD\">{</span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">title</span><span style=\"color: #C678DD\">}</span><span style=\"color: #ABB2BF\">&#x3C;/</span><span style=\"color: #E06C75\">p</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          &#x3C;/</span><span style=\"color: #E5C07B\">Link</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        ))</span><span style=\"color: #C678DD\">}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#x3C;/</span><span style=\"color: #E06C75\">main</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  );</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div>\n<p>We import all of our blog posts from contentlayer/generated and display them as links, sorted by date. By destructuring each post object, we can easily access its url and title properties.</p>\n<p>Note that we use new Date(b.date) - new Date(a.date) instead of an if statement to sort posts in descending order. We also renamed the component to Blog for clarity. Additionally, we included metadata for SEO purposes using the new metadata format available in next: 13.1.7-canary.5.</p>\n<h3>Creating a Single Blog Post Layout</h3>\n<p>To render each blog post in its own page, we need to create a slug page. This page will use a specific URL format to identify the post. We can create a file called [slug]/page.tsx and place the following content in it:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"tsx\" data-theme=\"default\"><code data-language=\"tsx\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">Balancer</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">from</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">'react-wrap-balancer'</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">import</span><span style=\"color: #ABB2BF\"> { </span><span style=\"color: #E06C75\">allPosts</span><span style=\"color: #ABB2BF\"> } </span><span style=\"color: #C678DD\">from</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">'contentlayer/generated'</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">export</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">async</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">generateStaticParams</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">allPosts</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">map</span><span style=\"color: #ABB2BF\">((</span><span style=\"color: #E06C75; font-style: italic\">post</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=></span><span style=\"color: #ABB2BF\"> ({</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">slug</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">url</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  }));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">export</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">async</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">generateMetadata</span><span style=\"color: #ABB2BF\">({ </span><span style=\"color: #E06C75; font-style: italic\">params</span><span style=\"color: #ABB2BF\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">allPosts</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">find</span><span style=\"color: #ABB2BF\">((</span><span style=\"color: #E06C75; font-style: italic\">post</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=></span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">url</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">===</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">params</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">slug</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">openGraph</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">siteName</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'Sameer Jadav'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">locale</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'en-US'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">type</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #98C379\">'article'</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E06C75\">twitter</span><span style=\"color: #ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">title</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      </span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">description</span><span style=\"color: #ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  };</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #C678DD\">export</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">default</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">async</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">function</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">Blog</span><span style=\"color: #ABB2BF\">({ </span><span style=\"color: #E06C75; font-style: italic\">params</span><span style=\"color: #ABB2BF\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">allPosts</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">find</span><span style=\"color: #ABB2BF\">((</span><span style=\"color: #E06C75; font-style: italic\">post</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=></span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">url</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">===</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">params</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">slug</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"> </span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#x3C;</span><span style=\"color: #E06C75\">article</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#x3C;</span><span style=\"color: #E06C75\">header</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &#x3C;</span><span style=\"color: #E06C75\">h1</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">          &#x3C;</span><span style=\"color: #E5C07B\">Balancer</span><span style=\"color: #ABB2BF\">></span><span style=\"color: #C678DD\">{</span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">title</span><span style=\"color: #C678DD\">}</span><span style=\"color: #ABB2BF\">&#x3C;/</span><span style=\"color: #E5C07B\">Balancer</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &#x3C;/</span><span style=\"color: #E06C75\">h1</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        &#x3C;</span><span style=\"color: #E06C75\">time</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66; font-style: italic\">className</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #98C379\">\"font-mono text-gray-400\"</span><span style=\"color: #ABB2BF\">></span><span style=\"color: #C678DD\">{</span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">date</span><span style=\"color: #C678DD\">}</span><span style=\"color: #ABB2BF\">&#x3C;/</span><span style=\"color: #E06C75\">time</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#x3C;/</span><span style=\"color: #E06C75\">header</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      &#x3C;</span><span style=\"color: #E06C75\">section</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #D19A66; font-style: italic\">className</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #98C379\">\"prose prose-invert prose-p:text-neutral-100\"</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #D19A66; font-style: italic\">dangerouslySetInnerHTML</span><span style=\"color: #56B6C2\">=</span><span style=\"color: #C678DD\">{</span><span style=\"color: #ABB2BF\">{ </span><span style=\"color: #E06C75\">__html</span><span style=\"color: #ABB2BF\">: </span><span style=\"color: #E5C07B\">post</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E5C07B\">body</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">html</span><span style=\"color: #ABB2BF\"> }</span><span style=\"color: #C678DD\">}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">      /></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#x3C;/</span><span style=\"color: #E06C75\">article</span><span style=\"color: #ABB2BF\">></span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  );</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div>\n<ul>\n<li>The <code>generateStaticParams()</code> function creates a new object from allPosts with only one property, slug, and assigns it to post.url. This object is then used to retrieve the requested blog post.</li>\n<li>The <code>generateMetadata()</code> function generates metadata for the blog post, such as the title, description, and social media tags.</li>\n<li>The <code>Blog</code> component renders the post's title, date, and body.</li>\n</ul>\n<p>Now, you have successfully created a blog app. You can design your own UI and start writing your own blog posts. Keep learning and sharing your knowledge with others.</p>"
    },
    "_id": "blog-website-with-nextjs-and-contentlayer.md",
    "_raw": {
      "sourceFilePath": "blog-website-with-nextjs-and-contentlayer.md",
      "sourceFileName": "blog-website-with-nextjs-and-contentlayer.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "blog-website-with-nextjs-and-contentlayer"
    },
    "type": "Post",
    "url": "blog-website-with-nextjs-and-contentlayer"
  }
]